#!/bin/bash

# Set the folder path
TCP="TCP/"
UDP="UDP/"
folder_path=""

#Term Colors
G='\033[0;32m'
LG='\033[1;32m'
Y='\033[1;33m'

#Clear the screen
clear
#Set cursor position
tput cup 2 0

#Print Logo
echo -e	"${Y}	██╗   ██╗██████╗ ███╗   ██╗    ███████╗███████╗██╗        "
echo -e	"${Y}	██║   ██║██╔══██╗████╗  ██║    ██╔════╝██╔════╝██║        "
echo -e	"${Y}	██║   ██║██████╔╝██╔██╗ ██║    ███████╗█████╗  ██║        "
echo -e	"${Y}	╚██╗ ██╔╝██╔═══╝ ██║╚██╗██║    ╚════██║██╔══╝  ██║        "
echo -e	"${Y}	 ╚████╔╝ ██║     ██║ ╚████║    ███████║███████╗███████╗   "
echo -e	"${Y}	  ╚═══╝  ╚═╝     ╚═╝  ╚═══╝    ╚══════╝╚══════╝╚══════╝ \n"
echo -e "             ${G}PLEASE SELECT AN OPENVPN CONFIGURATION:${LG}  \n"

echo -e "             +--------------------+                              "
echo -e "             |  1. TCP  | 2. UDP  |                              "
echo -e "             +--------------------+                            \n"

selectPath() {
#Select between TCP or UDP configurations
while [[ $folder_path = "" ]]; do
	echo -e "${LG}Select network protocol:${Y}"
	read -p "==>" nwp
	case $nwp in
	[1]) folder_path=$TCP
	echo -e "${LG} \nYou chose $folder_path.";;
	[2]) folder_path=$UDP
	echo -e "${LG} \nYou chose $folder_path.";;
	[3-9,0])
	echo -e " \nInvalid number. Please try again.";;
	esac
done
}
selectPath

printNames(){
# Read the file paths into an array
mapfile -t file_paths < <(find "$folder_path" -type f)

# Find the maximum file name length
max_length=0
for ((i=0; i<${#file_paths[@]}; i++)); do
  file_name=$(basename "${file_paths[$i]}")
  if [ ${#file_name} -gt $max_length ]; then
    max_length=${#file_name}
  fi
done

# Print the list of files inside an ASCII box
box_width=$((max_length + 10))
echo "            +----+$(printf "%*s" $box_width | tr ' ' '-')+"
echo "            | #  |$(printf "%*s" $box_width | tr ' ' '-')|"
echo "            +----+$(printf "%*s" $box_width | tr ' ' '-')+"
for ((i=0; i<${#file_paths[@]}; i++)); do
  file_name=$(basename "${file_paths[$i]}")
  printf "            | %2d |%-${box_width}s|\n" $((i+1)) "$file_name"
done
echo "            +----+$(printf "%*s" $box_width | tr ' ' '-')+"

echo "            (p to select a different protocol)                   "
}

printNames

VPNConfig=""
# Use a dynamic case statement to assign the VPNConfig variable
while [[ $VPNConfig = "" ]]; do
  echo -e "Enter the line number (or 'q' to quit): ${Y}"
  read -p "==>" line_number

  if [ "$line_number" = "q" ]; then
    break
  fi

  # Check if the line number is valid
  if (( line_number >= 1 && line_number <= ${#file_paths[@]} )); then

    VPNConfig="${file_paths[$((line_number-1))]}"
    YN=""

    while [[ $YN = "" ]]; do

		echo -e "${LG}Do you want to use: $VPNConfig? Y/N ${Y}"
		read -p "==> " yn
		case $yn in
		 [Y,y])
			 echo -e "${LG}Starting OpenVPN with $VPNConfig... \n"
			 YN=1
			 UseAuth=""
			 while [[ $UseAuth = "" ]]; do
			 echo -e "${LG}Want to use Auth-User-Pass? Y/N ${Y}"
			 read -p "==>" auth

				case $auth in
				[Y,y])
					sudo openvpn --config $VPNConfig --auth-user-pass pass.txt
					#$UseAuth=1
					break;;
				[N,n])
					sudo openvpn --config $VPNConfig
					#$UseAuth=1
					break;;
				*)
					echo -e "Invalid option. Please try again.";;
				esac
			 done;;
		 [N,n])
			 echo -e "${LG}Choose Another Config. \n"
			 VPNConfig=""
			 YN=1;;
		esac

    done
  else
    if [ "$line_number" = "p" ]; then
		folder_path=""
		selectPath
		printNames
    else
		echo -e "${LG}Invalid line number. Please try again."
    fi
  fi
done
